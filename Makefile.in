
# Copyright 2014-2015 Georgia Tech Research Corporation (GTRC). All rights reserved.

# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.

# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

SHELL = @bash@ -o pipefail -o errexit -o nounset

prefix = @prefix@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_VERSION = @PACKAGE_VERSION@

INSTALL = @INSTALL@
MKDIR_P = @MKDIR_P@
SED = @SED@

curl = @curl@
find = @find@
m4 = @m4@
shasum = @shasum@
tar = @tar@
unzip = @unzip@
zip = @zip@

dist_name = $(PACKAGE_NAME)-$(PACKAGE_VERSION)
share_dir_rel = share/${PACKAGE_NAME}
build_dir = tmp/build

# prerequisite packages
wrtools_core_package_name=wrtools-core
saxon_cli_package_name=saxon-cli
xalan_cli_package_name=xalan-cli

src_files = $(shell find src -type f ! -name '*~' ! -name '\#*' -print)

step_files := ${src_files}
step_files := ${step_files:src/%=${build_dir}/%}
step_files := ${step_files:${build_dir}/share/%=${build_dir}/${share_dir_rel}/%}
step_files := ${step_files:%.m4=%}

all_files = ${step_files}
install_files =  ${all_files:${build_dir}/%=${prefix}/%}

SCHEMATRON_ZIP = tmp/iso-schematron-xslt2.zip

TOKENS_DIR = tmp/tokens
TOKEN_CHECKSUMS_OK = $(TOKENS_DIR)/checksums-ok
TOKEN_EXTRACTED_SCHEMATRON = $(TOKENS_DIR)/extracted-schematron
TOKEN_PATCHED_SCHEMATRON = $(TOKENS_DIR)/patched-schematron

SCHEMATRON_ORIG_DIR = tmp/iso-schematron-orig
SCHEMATRON_PATCHED_DIR = tmp/iso-schematron-patched
SCHEMATRON_PATCH_FILE = iso-schematron-xslt2.patch

installed_schematron_dir = ${prefix}/${share_dir_rel}/iso-schematron-xslt2
installed_schematron_turd = ${installed_schematron_dir}/.turd_installed_schematron

CHECKSUM_FILE=shasums.txt

# invoke with $(call touch,$@)
touch = mkdir -p $(dir $(1)) && touch $(1)

.PHONY: default
default: all

.SECONDARY:

#############################################################################
# all

.PHONY: all # Generate all the usual suspects
all: $(all_files) ${TOKEN_PATCHED_SCHEMATRON}

#############################################################################
# install

.PHONY: install # Install everything to install dir (Default @prefix@, set via configure)
install: ${install_files} ${installed_schematron_turd}

${installed_schematron_turd}: $(TOKEN_PATCHED_SCHEMATRON)
	$(MKDIR_P) ${installed_schematron_dir}
	(cd $(SCHEMATRON_PATCHED_DIR) && tar cf - .) \
		| (cd ${installed_schematron_dir} && tar xf -)
	touch ${installed_schematron_turd}

${prefix}/bin/%: ${build_dir}/bin/%
	${MKDIR_P} ${dir $@}
	${INSTALL} -m 755 $< $@

${prefix}/%: ${build_dir}/%
	${MKDIR_P} ${dir $@}
	${INSTALL} -m 644 $< $@

.PHONY: uninstall # Remove installed products
uninstall:
	$(RM) ${install_files}
	${RM} -r ${installed_schematron_dir}

#############################################################################
# build

${build_dir}/${share_dir_rel}/%: src/share/%
	${MKDIR_P} ${dir $@}
	${INSTALL} $< $@

${build_dir}/%: src/%
	${MKDIR_P} ${dir $@}
	${INSTALL} $< $@

${build_dir}/%: ${build_dir}/%.m4 m4-header.m4
	$(MKDIR_P) $(dir $@)
	$(m4) -P \
		-DMACRO_PACKAGE_NAME="$(PACKAGE_NAME)" \
		-DMACRO_WRTOOLS_CORE_PACKAGE_NAME="$(wrtools_core_package_name)" \
		-DM_SHARE_DIR_REL="${share_dir_rel}" \
		m4-header.m4 $< > $@

#############################################################################
# schematron XSLT pile

fetch: $(SCHEMATRON_ZIP)

$(SCHEMATRON_ZIP):
	$(MKDIR_P) $(dir $@)
	$(curl) -o $@ https://schematron.googlecode.com/files/iso-schematron-xslt2.zip

extract: $(TOKEN_EXTRACTED_SCHEMATRON)

$(TOKEN_EXTRACTED_SCHEMATRON): $(SCHEMATRON_ZIP) $(TOKEN_CHECKSUMS_OK) 
	$(RM) $@
	$(RM) -r $(SCHEMATRON_ORIG_DIR)
	$(MKDIR_P) $(SCHEMATRON_ORIG_DIR)
	$(unzip) -d $(SCHEMATRON_ORIG_DIR) $<
	$(MKDIR_P) -p $(dir $@)
	$(call touch,$@)

patch: $(TOKEN_PATCHED_SCHEMATRON)

$(TOKEN_PATCHED_SCHEMATRON): $(SCHEMATRON_PATCH_FILE) $(TOKEN_EXTRACTED_SCHEMATRON)
	$(RM) $@
	$(RM) -r $(SCHEMATRON_PATCHED_DIR)
	$(MKDIR_P) $(SCHEMATRON_PATCHED_DIR)
	(cd $(SCHEMATRON_ORIG_DIR) && tar cf - .) | (cd $(SCHEMATRON_PATCHED_DIR) && tar xf -)
	patch -p0 --input=$<
	$(MKDIR_P) -p $(dir $@)
	$(call touch,$@)

reset-patch: $(TOKEN_EXTRACTED_SCHEMATRON)
	$(RM) -r tmp/schematron-patched
	mv $(SCHEMATRON_PATCHED_DIR) tmp/schematron-patched
	$(MKDIR_P) $(SCHEMATRON_PATCHED_DIR)
	(cd $(SCHEMATRON_ORIG_DIR) && tar cf - .) | (cd $(SCHEMATRON_PATCHED_DIR) && tar xf -)
	- diff -Naur -x '*~' $(SCHEMATRON_PATCHED_DIR) tmp/schematron-patched > $(SCHEMATRON_PATCH_FILE)
	$(RM) -r $(SCHEMATRON_PATCHED_DIR)
	mv tmp/schematron-patched $(SCHEMATRON_PATCHED_DIR)

.PHONY: stage-patch
stage-patch: $(TOKEN_EXTRACTED_SCHEMATRON)
	$(RM) -r $(SCHEMATRON_PATCHED_DIR)
	$(MKDIR_P) $(SCHEMATRON_PATCHED_DIR)
	(cd $(SCHEMATRON_ORIG_DIR) && tar cf - .) | (cd $(SCHEMATRON_PATCHED_DIR) && tar xf -)

# end Schematron XSLT pile
#############################################################################
# checksums

$(TOKEN_CHECKSUMS_OK): $(CHECKSUM_FILE) $(SCHEMATRON_ZIP)
	shasum -c $(CHECKSUM_FILE)
	mkdir -p $(dir $@)
	$(call touch,$@)

reset-shasums: $(SCHEMATRON_ZIP)
	$(shasum) -a 1 -b $^ > $(CHECKSUM_FILE)

# end checksums
#############################################################################

clean:
	$(RM) -r tmp

distclean: clean
	$(RM) -r autom4te.cache .gradle tmp
	$(RM) Makefile config.log config.status stow.mk

#############################################################################
# zip

.PHONY: zip
zip: tmp/$(dist_name).zip

tmp/$(dist_name).zip: all
	$(MAKE) -f prerequisites.mk
	$(RM) -r tmp/$(dist_name)
	$(MKDIR_P) tmp/$(dist_name)
	(cd tmp/all && $(tar) cf - .) | (cd tmp/$(dist_name) && $(tar) xf -)
	(cd tmp/prerequisites && $(tar) cf - .) | (cd tmp/$(dist_name) && $(tar) xf -)
	cd tmp && $(zip) -9 -r $(dist_name).zip $(dist_name)
