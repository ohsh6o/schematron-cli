#!/usr/bin/env bash

#HELP:COMMAND_NAME: run a Schematron document against an XML document
#HELP:Usage: COMMAND_NAME option* $file-to-test.xml
#HELP:Options:
#HELP:  --help | -h: print this help
#HELP:  --verbose | -v: print debugging and status output
#HELP:  --keep-temps | -k: Don't delete temporary files

set -o nounset -o errexit -o pipefail

root_dir=$(dirname "$0")/..
. "$root_dir"/share/wrtools-core/opt_help.bash
. "$root_dir"/share/wrtools-core/opt_verbose.bash
. "$root_dir"/share/wrtools-core/fail.bash
. "$root_dir"/share/wrtools-core/temp.bash

#HELP:  --schema=$schema | -s $schema: validate against Schematron schema
unset SCHEMA
opt_schema () {
    (( $# == 1 )) || fail "$FUNCNAME requires 1 arg (got $#)"
    [[ ${SCHEMA+is-set} != is-set ]] || fail "Option --schema can only be used once"
    [[ -f $1 ]] || fail "Argument to --schema must be a file ($1)"
    vecho "Validating against Schematron schema \"$1\""
    SCHEMA=$1
}

#HELP:  --format=$format: Generate output in indicated format (default is text). Options:
#HELP:        svrl: Schematron Validation Report Langugage
#HELP:        text: grep-like text output
format=text
opt_format () {
    (( $# == 1 )) || fail "$FUNCNAME must have 1 argument, an output format"
    case $1 in
        svrl | text ) format=$1;;
        * ) fail "Option --format got unexpected format \"$1\"";;
    esac
}

#HELP:  --param=$variable=$value: set XSLT parameter, using Saxon syntax
#HELP:    e.g., --param=+xml-catalog=subset/xml-catalog.xml
#HELP:    Use "saxon -- -?" to see Saxon parameter syntax
PARAMS=()
opt_param () {
    PARAMS+=("$1")
}

OPTIND=1
while getopts :fhkvs:-: OPTION
do
    case "$OPTION" in
        h ) opt_help;;
        k ) opt_keep_temps;;
        v ) opt_verbose;;
        s ) opt_schema "$OPTARG";;
        - )
            case "$OPTARG" in
                help ) opt_help;;
                keep-temps ) opt_keep_temps;;
                verbose ) opt_verbose;;
                help=* | keep-temps=* | verbose=* ) 
                    fail "No argument expected for long option \"${OPTARG%%=*}\"";;

                format=* ) opt_format "${OPTARG#*=}";;
                param=* ) opt_param "${OPTARG#*=}";;
                schema=* ) opt_schema "${OPTARG#*=}";;
                format | param | schema )
                    fail "Missing required argument for long option \"$OPTARG\"";;
                
                * ) fail "Unexpected long option \"$OPTARG\"";;
            esac;;
        '?' ) fail "Unknown short option \"$OPTARG\"";;
        : ) fail "Short option \"$OPTARG\" missing argument";;
        * ) fail "bad state OPTARG=\"$OPTARG\"";;
    esac
done
shift $((OPTIND-1))

# check options
[[ ${SCHEMA+is-set} = is-set ]] || fail "Required option --schema not used" 

# check args
(( $# == 1 )) || fail "Must be 1 file to validate (got $#)"
[[ -f $1 ]] || fail "File to test not found ($1)"

xslt_file="$SCHEMA.xsl"

vrun "$root_dir"/bin/schematron-compile --output-file="$xslt_file" "$SCHEMA"

command=("$root_dir"/bin/schematron-execute --xslt-file="$xslt_file" --format="$format")
for key in "${!PARAMS[@]}"
do command+=(--param="${PARAMS[key]}")
done

for file in "$@"
do vrun "${command[@]}" "$file"
done
